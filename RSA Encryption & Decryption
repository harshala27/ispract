sudo apt update && sudo apt upgrade -y
sudo apt install python3 python3-pip -y
python3 -m venv rsa_env
source rsa_env/bin/activate
pip install cryptography pandas faker

nano rsa_key.py


######################
from cryptography.hazmat.primitives.asymmetric import rsa
from cryptography.hazmat.primitives import serialization

# Generate private key
private_key = rsa.generate_private_key(
    public_exponent=65537,
    key_size=2048
)

# Save private key
with open("rsa_private.pem", "wb") as f:
    f.write(private_key.private_bytes(
        encoding=serialization.Encoding.PEM,
        format=serialization.PrivateFormat.TraditionalOpenSSL,
        encryption_algorithm=serialization.NoEncryption()
    ))

# Generate public key
public_key = private_key.public_key()

# Save public key
with open("rsa_public.pem", "wb") as f:
    f.write(public_key.public_bytes(
        encoding=serialization.Encoding.PEM,
        format=serialization.PublicFormat.SubjectPublicKeyInfo
    ))

print("RSA key pair generated and saved.")

#######################

python3 rsa_key.py



nano rsa_encrypt.py



#####################

from cryptography.hazmat.primitives.asymmetric import padding
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives import serialization

# Load the public key
with open("rsa_public.pem", "rb") as f:
    public_key = serialization.load_pem_public_key(f.read())

# The message to encrypt
message = b"Secure Data Transfer"

# Encrypt the message
encrypted = public_key.encrypt(
    message,
    padding.OAEP(
        mgf=padding.MGF1(algorithm=hashes.SHA256()),
        algorithm=hashes.SHA256(),
        label=None
    )
)

print(f"Encrypted Data: {encrypted}")

###########################

python3 rsa_encrypt.py




nano rsa_decrypt.py

########################

from cryptography.hazmat.primitives.asymmetric import padding
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives import serialization

# Load the private key
with open("rsa_private.pem", "rb") as f:
    private_key = serialization.load_pem_private_key(f.read(), password=None)

# Encrypted message (replace ENCRYPTED_MESSAGE_HERE with your actual encrypted data)
encrypted_message = b'ENCRYPTED_MESSAGE_HERE'

# Decrypt the message
decrypted = private_key.decrypt(
    encrypted_message,
    padding.OAEP(
        mgf=padding.MGF1(algorithm=hashes.SHA256()),
        algorithm=hashes.SHA256(),
        label=None
    )
)

print(f"Decrypted Data: {decrypted.decode()}")
################################


python3 rsa_decrypt.py



